import eei::*;

module top (
    clk: input clock,
    rst: input reset,
) {
    function addr_to_memaddr (
        addr: input logic<XLEN>,
    ) -> logic<MEM_ADDR_WIDTH> {
        return addr[$clog2(MEM_DATA_WIDTH / 8)+:MEM_ADDR_WIDTH];
    }

    inst membus     : membus_if::<MEM_DATA_WIDTH, MEM_ADDR_WIDTH>;
    inst membus_core: membus_if::<ILEN, XLEN>;

    inst mem: memory::<MEM_DATA_WIDTH, MEM_ADDR_WIDTH> #(
        FILEPATH_IS_ENV: 1                 ,
        FILEPATH       : "MEMORY_FILE_PATH",
    ) (
        clk     ,
        rst     ,
        membus  ,
    );

    inst c: core (
        clk                ,
        rst                ,
        membus: membus_core,
    );

    always_comb {
        membus.valid      = membus_core.valid;
        membus_core.ready = membus.ready;

        membus.addr        = addr_to_memaddr(membus_core.addr);
        membus.wen         = 0;
        membus.wdata       = 'x;
        membus_core.rvalid = membus.rvalid;
        membus_core.rdata  = membus.rdata;
    }
}
